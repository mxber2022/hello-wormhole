/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WormholeSimulator,
  WormholeSimulatorInterface,
} from "../WormholeSimulator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "wormhole_",
        type: "address",
        internalType: "address",
      },
      {
        name: "devnetGuardian",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "encodeAndSignMessage",
    inputs: [
      {
        name: "vm_",
        type: "tuple",
        internalType: "struct IWormhole.VM",
        components: [
          {
            name: "version",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "timestamp",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "nonce",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "emitterChainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "emitterAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sequence",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "consistencyLevel",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "guardianSetIndex",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "signatures",
            type: "tuple[]",
            internalType: "struct IWormhole.Signature[]",
            components: [
              {
                name: "r",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "s",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "v",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "guardianIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "hash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "encodeObservation",
    inputs: [
      {
        name: "vm_",
        type: "tuple",
        internalType: "struct IWormhole.VM",
        components: [
          {
            name: "version",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "timestamp",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "nonce",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "emitterChainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "emitterAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sequence",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "consistencyLevel",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "guardianSetIndex",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "signatures",
            type: "tuple[]",
            internalType: "struct IWormhole.Signature[]",
            components: [
              {
                name: "r",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "s",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "v",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "guardianIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "hash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "encodedObservation",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "fetchSignedMessageFromLogs",
    inputs: [
      {
        name: "log",
        type: "tuple",
        internalType: "struct VmSafe.Log",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "emitterChainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "fetchWormholeMessageFromLog",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "setMessageFee",
    inputs: [
      {
        name: "newFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vm",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "wormhole",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IWormhole",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020073803806200200783398101604081905262000034916200065b565b600080546001600160a01b0319166001600160a01b03841617905560018190556040516001625e79b760e01b0319815260048101829052620000d49060008051602062001fe78339815191529063ffa1864990602401602060405180830381865afa158015620000a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ce91906200068a565b620000dc565b5050620008aa565b604051630667f9d760e41b81523060048201526002602482015260009060008051602062001fe78339815191529063667f9d7090604401602060405180830381865afa15801562000131573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001579190620006af565b905080156200019e5760405162461bcd60e51b815260206004820152600e60248201526d1a5b98dbdc9c9958dd081cdb1bdd60921b60448201526064015b60405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b0316631cfe79516040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002199190620006de565b6040805163ffffffff8316602082015260029181019190915290915060009060600160408051808303601f1901815290829052805160209091012060008054630667f9d760e41b84526001600160a01b03166004840152602483018290529092509060008051602062001fe78339815191529063667f9d7090604401602060405180830381865afa158015620002b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002d99190620006af565b905060015b81811015620003ad57600054604080516020808201879052825180830382018152918301909252805191012060008051602062001fe7833981519152916370ca10bb916001600160a01b03909116906200033a908590620006fc565b60405160e084901b6001600160e01b03191681526001600160a01b039092166004830152602482015260006044820152606401600060405180830381600087803b1580156200038857600080fd5b505af11580156200039d573d6000803e3d6000fd5b50505050600181019050620002de565b5060008054604080516020808201879052825180830382018152918301909252805191012060008051602062001fe7833981519152926370ca10bb926001600160a01b031691620003fe91620006fc565b60405160e084901b6001600160e01b03191681526001600160a01b03928316600482015260248101919091529088166044820152606401600060405180830381600087803b1580156200045057600080fd5b505af115801562000465573d6000803e3d6000fd5b50506000546040516370ca10bb60e01b81526001600160a01b039091166004820152602481018590526001604482015260008051602062001fe783398151915292506370ca10bb9150606401600060405180830381600087803b158015620004cc57600080fd5b505af1158015620004e1573d6000803e3d6000fd5b505060008054604051637ca8cbad60e11b815263ffffffff881660048201529193506001600160a01b0316915063f951975a90602401600060405180830381865afa15801562000535573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200055f919081019062000797565b518051909150600114620005b65760405162461bcd60e51b815260206004820152601560248201527f677561726469616e732e6c656e67746820213d20310000000000000000000000604482015260640162000195565b856001600160a01b031681600081518110620005d657620005d662000894565b60200260200101516001600160a01b031614620006365760405162461bcd60e51b815260206004820152601f60248201527f696e636f727265637420677561726469616e20736574206f7665727269646500604482015260640162000195565b505050505050565b80516001600160a01b03811681146200065657600080fd5b919050565b600080604083850312156200066f57600080fd5b6200067a836200063e565b9150602083015190509250929050565b6000602082840312156200069d57600080fd5b620006a8826200063e565b9392505050565b600060208284031215620006c257600080fd5b5051919050565b805163ffffffff811681146200065657600080fd5b600060208284031215620006f157600080fd5b620006a882620006c9565b600082198211156200071e57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156200075e576200075e62000723565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200078f576200078f62000723565b604052919050565b60006020808385031215620007ab57600080fd5b82516001600160401b0380821115620007c357600080fd5b9084019060408287031215620007d857600080fd5b620007e262000739565b825182811115620007f257600080fd5b8301601f810188136200080457600080fd5b80518381111562000819576200081962000723565b8060051b93506200082c86850162000764565b818152938201860193868101908a8611156200084757600080fd5b928701925b85841015620008705762000860846200063e565b825292870192908701906200084c565b84525062000883915050838501620006c9565b848201528094505050505092915050565b634e487b7160e01b600052603260045260246000fd5b61172d80620008ba6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806355a58d7d1161005b57806355a58d7d146100f357806364bb9bfb1461011357806384acd1bb14610126578063b34cd8601461013957600080fd5b80630e6452951461008257806323aa2a9d146100ab5780633a768463146100c0575b600080fd5b610095610090366004611076565b61014c565b6040516100a291906111f6565b60405180910390f35b6100be6100b9366004611210565b610408565b005b6100db737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020016100a2565b610106610101366004611315565b6106e2565b6040516100a291906113c5565b610095610121366004611076565b6108a6565b6000546100db906001600160a01b031681565b610095610147366004611488565b6108f7565b60606000610159836108a6565b905061016481610937565b610140840152604080516001808252818301909252600091816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610181579050506001546101408601516040516338d07aa960e21b815260048101929092526024820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa490604401606060405180830381865afa158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b91906114d9565b8360008151811061024e5761024e611510565b60200260200101516040018460008151811061026c5761026c611510565b60200260200101516000018560008151811061028a5761028a611510565b602002602001015160200183815250838152508360ff1660ff168152505050506000816000815181106102bf576102bf611510565b60200260200101516060019060ff16908160ff1681525050836000015160008054906101000a90046001600160a01b03166001600160a01b0316631cfe79516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190611526565b82518360008261036357610363611510565b6020026020010151606001518460008151811061038257610382611510565b602002602001015160000151856000815181106103a1576103a1611510565b602002602001015160200151601b876000815181106103c2576103c2611510565b6020026020010151604001516103d89190611559565b886040516020016103f098979695949392919061157c565b60405160208183030381529060405292505050919050565b600063436f726560001b9050600081600360008054906101000a90046001600160a01b03166001600160a01b0316639a8a05926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e91906115f2565b856040516020016104d2949392919093845260f89290921b6001600160f81b031916602084015260f01b6001600160f01b0319166021830152602382015260430190565b60408051601f19818403018152610160830182526001835263ffffffff421660208481019190915260008484018190528054845163fbe3c2cd60e01b8152945193965090949360608501936001600160a01b039092169263fbe3c2cd926004808401938290030181865afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057291906115f2565b61ffff16815260200160008054906101000a90046001600160a01b03166001600160a01b031663b172b2226040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f0919061160f565b81526000602080830182905260c860408085019190915260608401879052608084018390528051838152918201905260a0909201919061065f565b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161062b5790505b508152600060209091018190529091506106788261014c565b60005460405163f42bc64160e01b81529192506001600160a01b03169063f42bc641906106a99084906004016111f6565b600060405180830381600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050505050505050565b60606000805b835181101561076f577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b284828151811061072457610724611510565b60200260200101516000015160008151811061074257610742611510565b60200260200101510361075d5761075a600183611628565b91505b8061076781611640565b9150506106e8565b506000816001600160401b0381111561078a5761078a610e0b565b6040519080825280602002602001820160405280156107d757816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816107a85790505b5090506000805b855181101561089c577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b286828151811061081a5761081a611510565b60200260200101516000015160008151811061083857610838611510565b60200260200101510361088a5785818151811061085757610857611510565b602002602001015183838151811061087157610871611510565b6020908102919091010152610887600183611628565b91505b8061089481611640565b9150506107de565b5090949350505050565b606081602001518260400151836060015184608001518560a001518660c001518760e001516040516020016108e19796959493929190611659565b6040516020818303038152906040529050919050565b6060610901610db0565b61090a84610970565b6001815263ffffffff4216602082015261ffff84166060820152905061092f8161014c565b949350505050565b6000818051906020012060405160200161095391815260200190565b604051602081830303815290604052805190602001209050919050565b610978610db0565b6000826000015160018151811061099157610991611510565b60200260200101518260800181815250506109c960088260206109b49190611628565b6109be91906116e0565b602085015190610b2f565b6001600160401b031660a08301526109e2602082611628565b9050610a0960046109f4836020611628565b6109fe91906116e0565b602085015190610b8c565b63ffffffff166040830152610a1f602082611628565b9050610a2c602082611628565b9050610a536001610a3e836020611628565b610a4891906116e0565b602085015190610be9565b60ff1660c0830152610a66602082611628565b90506000610a81828560200151610c4590919063ffffffff16565b9050610a8e602083611628565b6020850151909250610aa1908383610ca3565b60e0840152610ab08183611628565b915081846020015151610ac391906116e0565b610acd9083611628565b91508360200151518214610b285760405162461bcd60e51b815260206004820181905260248201527f6661696c656420746f20706172736520776f726d686f6c65206d65737361676560448201526064015b60405180910390fd5b5050919050565b6000610b3c826008611628565b83511015610b835760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610b1f565b50016008015190565b6000610b99826004611628565b83511015610be05760405162461bcd60e51b8152602060048201526014602482015273746f55696e7433325f6f75744f66426f756e647360601b6044820152606401610b1f565b50016004015190565b6000610bf6826001611628565b83511015610c3c5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610b1f565b50016001015190565b6000610c52826020611628565b83511015610c9a5760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610b1f565b50016020015190565b606081610cb181601f611628565b1015610cf05760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b1f565b610cfa8284611628565b84511015610d3e5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b1f565b606082158015610d5d5760405191506000825260208201604052610da7565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d96578051835260209283019201610d7e565b5050858452601f01601f1916604052505b50949350505050565b604080516101608101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201819052610100820183905261012082015261014081019190915290565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610e4357610e43610e0b565b60405290565b60405161016081016001600160401b0381118282101715610e4357610e43610e0b565b604051606081016001600160401b0381118282101715610e4357610e43610e0b565b604051601f8201601f191681016001600160401b0381118282101715610eb657610eb6610e0b565b604052919050565b60ff81168114610ecd57600080fd5b50565b8035610edb81610ebe565b919050565b63ffffffff81168114610ecd57600080fd5b8035610edb81610ee0565b61ffff81168114610ecd57600080fd5b8035610edb81610efd565b80356001600160401b0381168114610edb57600080fd5b600082601f830112610f4057600080fd5b81356001600160401b03811115610f5957610f59610e0b565b610f6c601f8201601f1916602001610e8e565b818152846020838601011115610f8157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03821115610fb757610fb7610e0b565b5060051b60200190565b600082601f830112610fd257600080fd5b81356020610fe7610fe283610f9e565b610e8e565b82815260079290921b8401810191818101908684111561100657600080fd5b8286015b8481101561106b57608081890312156110235760008081fd5b61102b610e21565b81358152848201358582015260408083013561104681610ebe565b9082015260608281013561105981610ebe565b9082015283529183019160800161100a565b509695505050505050565b60006020828403121561108857600080fd5b81356001600160401b038082111561109f57600080fd5b9083019061016082860312156110b457600080fd5b6110bc610e49565b6110c583610ed0565b81526110d360208401610ef2565b60208201526110e460408401610ef2565b60408201526110f560608401610f0d565b60608201526080830135608082015261111060a08401610f18565b60a082015261112160c08401610ed0565b60c082015260e08301358281111561113857600080fd5b61114487828601610f2f565b60e083015250610100611158818501610ef2565b90820152610120838101358381111561117057600080fd5b61117c88828701610fc1565b91830191909152506101409283013592810192909252509392505050565b60005b838110156111b557818101518382015260200161119d565b838111156111c4576000848401525b50505050565b600081518084526111e281602086016020860161119a565b601f01601f19169290920160200192915050565b60208152600061120960208301846111ca565b9392505050565b60006020828403121561122257600080fd5b5035919050565b80356001600160a01b0381168114610edb57600080fd5b60006060828403121561125257600080fd5b61125a610e6c565b905081356001600160401b038082111561127357600080fd5b818401915084601f83011261128757600080fd5b81356020611297610fe283610f9e565b82815260059290921b840181019181810190888411156112b657600080fd5b948201945b838610156112d4578535825294820194908201906112bb565b865250858101359350828411156112ea57600080fd5b6112f687858801610f2f565b818601525050505061130a60408301611229565b604082015292915050565b6000602080838503121561132857600080fd5b82356001600160401b038082111561133f57600080fd5b818501915085601f83011261135357600080fd5b8135611361610fe282610f9e565b81815260059190911b8301840190848101908883111561138057600080fd5b8585015b838110156113b85780358581111561139c5760008081fd5b6113aa8b89838a0101611240565b845250918601918601611384565b5098975050505050505050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561147957898403603f19018652825180516060808752815190870181905260808701918b019085905b8082101561143a5782518452928c0192918c01916001919091019061141a565b505050898201518682038b88015261145282826111ca565b928a01516001600160a01b0316968a019690965250958801959350918701916001016113ed565b50919998505050505050505050565b6000806040838503121561149b57600080fd5b82356001600160401b038111156114b157600080fd5b6114bd85828601611240565b92505060208301356114ce81610efd565b809150509250929050565b6000806000606084860312156114ee57600080fd5b83516114f981610ebe565b602085015160409095015190969495509392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561153857600080fd5b815161120981610ee0565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168082101561157357611573611543565b90039392505050565b600060ff60f81b808b60f81b16835263ffffffff60e01b8a60e01b166001840152808960f81b166005840152808860f81b166006840152866007840152856027840152808560f81b1660478401525082516115de81604885016020870161119a565b919091016048019998505050505050505050565b60006020828403121561160457600080fd5b815161120981610efd565b60006020828403121561162157600080fd5b5051919050565b6000821982111561163b5761163b611543565b500190565b60006001820161165257611652611543565b5060010190565b6001600160e01b031960e089811b8216835288901b1660048201526001600160f01b031960f087901b166008820152600a81018590526001600160c01b031960c085901b16602a8201526001600160f81b031960f884901b16603282015281516000906116cd81603385016020870161119a565b9190910160330198975050505050505050565b6000828210156116f2576116f2611543565b50039056fea2646970667358221220c4f03abec780efb301d4082ca72c6d36a3bc21d7bbf8055f3e8877a9c2cec08864736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d";

type WormholeSimulatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeSimulatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WormholeSimulator__factory extends ContractFactory {
  constructor(...args: WormholeSimulatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wormhole_: string,
    devnetGuardian: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<WormholeSimulator> {
    return super.deploy(
      wormhole_,
      devnetGuardian,
      overrides || {}
    ) as Promise<WormholeSimulator>;
  }
  override getDeployTransaction(
    wormhole_: string,
    devnetGuardian: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wormhole_,
      devnetGuardian,
      overrides || {}
    );
  }
  override attach(address: string): WormholeSimulator {
    return super.attach(address) as WormholeSimulator;
  }
  override connect(signer: Signer): WormholeSimulator__factory {
    return super.connect(signer) as WormholeSimulator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeSimulatorInterface {
    return new utils.Interface(_abi) as WormholeSimulatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeSimulator {
    return new Contract(address, _abi, signerOrProvider) as WormholeSimulator;
  }
}
